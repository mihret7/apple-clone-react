*******************************
React Routing
    Why Routing?
       - React is a Single Page Application (SPA)framework, meaning it only serves one HTML file (index.html) and 
         updates the UI dynamically using JavaScript without reloading the page.
       - As a result, traditional multi-page navigation (like full-page reloads) does not work by default.
       - To simulate navigating between "pages" (views) in a SPA, we use routing.


How to handle "multiple pages" in React?
    - Use React Router, a routing library for React.
    - Install it via:
         - npm install react-router-dom
    - Import and use its components (BrowserRouter, Routes, Route, etc.) to define the UI for different URLs without 
      leaving the single-page context.




**************************************
Main parts of react-router
    - BrowserRouter
    - Routes
    - Route
    - Link
NB: These 4 are JSX elements that we include in our render tree, just like any React component.



More on Them....
   1. BrowserRouter
        - Wraps our entire app.
        - Enables navigation using the browser's address bar and history stack (HTML5 history API).
        - Example code:
                import { BrowserRouter } from 'react-router-dom';
                <BrowserRouter>
                    <App />
                </BrowserRouter>

   2. Routes
        - A container for all the route definitions.
        - NB: we should wrap only components which are depends on route.
        - Example code:
            <Routes>
              <Route path="/" element={<Home />} />
              <Route path="/about" element={<About />} />
            </Routes>


    3. Route
        - Defines a single route (URL path and what component to render).
        - Uses `path` for the URL and `element` to specify the component to render.
        - NB: here path & element are properties of Route component.
                <Route path="" element={} />
        - So:
           - Path property: specify the path for the URL.
           - element property: specify the component to render.

        - Example Code:
               <Route path="/contact" element={<Contact />} />
        - NB:
           - path="*" means -- if the given route(url) is not specified.

    4. Link
        - Used to navigate between routes without page reload.
        - Replaces anchor tag (`<a>` tags)in single-page apps.
        - NB: replace <a> with <Link>  ----and---- "href" with "to".
        - It gives us the advantage not to lose our states
        - Example code:
            <Link to="/about">About</Link>

NB: BrowserRouter, Routes and Link have closing tags, but Route is self-closing.



************************
Shared Layout
  1) create a separet jsx component for shared layout.
          <>
              <SharedComponent1 />
              <SharedComponent2 />

          </>
  2) include this component in the APP.jsx as a Route and nest the remaining Route inside this Route
        <Route path="" element={<SharedLayout/>}>
             
             <Route    />
             <Route    />
        </Route>

  3) import and include "Outlet" in the SharedLayout
      - an <Outlet /> is a component used to render nested routes
      - we can think of <Outlet /> as a placeholder in our layout component where child routes will be rendered
      - the place we put Outlet matters


           <>
              <SharedComponent1 />
              <Outlet />
              <SharedComponent2 />
           </>



**********************************************
Using useParams:
   - it is a React Router Hook used to access the URL parameters in a component rendered by a route
   - it is imported from 'react-router-dom'
   - useParams() returns an object of key-value pairs from the URL.
   - Example:
        // in our App.jsx
        <Route path="/products/:id" element={<ProductDetail />} />


   - the :id part in the path is a route parameter â€” it's a placeholder for a dynamic value in the URL 

        // in our single page - using the url parameter
        import { useParams } from 'react-router-dom';        
        function ProductDetail() {
            const { id } = useParams();  // extract the url parameter like this
            return <h2>Product ID: {id}</h2>;
        }

